{"version":3,"sources":["context/index.js","components/EmployeesList/EmployeesListItem/index.js","components/EmployeesList/index.js","components/EmployeesBithdays/EmployeesBithdaysItem/index.js","components/EmployeesBithdays/index.js","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","AppProvider","children","useState","data","setData","getData","a","axios","get","res","selected","localStorage","getItem","map","el","includes","id","console","log","useEffect","Provider","value","handleCheckboxChange","e","target","checked","JSON","parse","push","filter","setItem","stringify","item","EmployeesListItem","employee","useContext","fullName","lastName","firstName","className","type","onChange","EmployeesList","alphabet","split","i","validEmployees","length","EmployeesBirthdayItem","dob","name","formatDOB","moment","format","EmployeesBirthdays","selectedData","renderMonths","month","monthList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95b20d37.chunk.js","sourcesContent":["import { createContext, useEffect, useState } from 'react'\nimport axios from 'axios'\n\nexport const AppContext = createContext()\n\nconst AppProvider = ({ children }) => {\n  const [data, setData] = useState([])\n\n  const getData = async () => {\n    try {\n      const res = await axios.get(`https://yalantis-react-school-api.yalantis.com/api/task0/users`)\n      let selected = localStorage.getItem('selected')\n      if (selected) {\n        const data = res.data.map(el => {\n          if (selected.includes(el.id)) {\n            return { ...el, selected: true }\n          }\n          return el\n        })\n        setData(data)\n      } else {\n        setData(res.data)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const handleCheckboxChange = (e) => {\n    const { value, checked } = e.target\n    let selected = localStorage.getItem('selected')\n    selected = selected ? JSON.parse(selected) : []\n    if (!checked) {\n      selected = selected.filter(el => el !== value)\n    } else {\n      selected.push(value)\n    }\n    localStorage.setItem('selected', JSON.stringify(selected))\n    setData(data.map(item =>\n      item.id === value\n        ? { ...item, selected: checked }\n        : item\n    ))\n  }\n\n  return (\n    <AppContext.Provider value={{ data, handleCheckboxChange }}>\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nexport default AppProvider\n","import { useContext } from 'react'\nimport '../../../App.css'\nimport { AppContext } from '../../../context'\n\nconst EmployeesListItem = ({ employee }) => {\n  const { handleCheckboxChange } = useContext(AppContext)\n  const fullName = `${employee.lastName} ${employee.firstName}`\n  return (\n    <div className=\"list-item\">\n      <input\n        type=\"checkbox\"\n        className=\"checkbox\"\n        value={employee.id}\n        onChange={handleCheckboxChange}\n        checked={employee.selected || false}\n      />\n      <p>{fullName}</p>\n    </div>\n  )\n}\n\nexport default EmployeesListItem","import { useContext } from 'react'\nimport '../../App.css'\nimport { AppContext } from '../../context'\nimport EmployeesListItem from './EmployeesListItem'\n\nconst EmployeesList = () => {\n  const { data } = useContext(AppContext)\n\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n\n  return (\n    <div className=\"container\">\n      <h2>Employees</h2>\n      {alphabet.map((el, i) => {\n        const validEmployees = data.filter(item => item.lastName[0] === el)\n        return <div key={i}>\n          <h3>{el}</h3>\n          {!validEmployees.length ?\n            <p>----</p> :\n            validEmployees.map(employee => {\n              return <EmployeesListItem key={employee.id} employee={employee}/>\n            })}\n        </div>\n      })}\n    </div>\n  )\n}\n\nexport default EmployeesList","import moment from 'moment'\n\nconst EmployeesBirthdayItem = ({ employee: { lastName, firstName, dob } }) => {\n  const name = `${lastName} ${firstName}`\n  const formatDOB = moment(dob).format('D MMMM, YYYY')\n  return (\n    <li>{name} - {formatDOB} year</li>\n  )\n}\n\nexport default EmployeesBirthdayItem\n","import { useContext } from 'react'\nimport '../../App.css'\nimport moment from 'moment'\nimport { AppContext } from '../../context'\nimport EmployeesBirthdayItem from './EmployeesBithdaysItem'\n\n\nconst EmployeesBirthdays = () => {\n  const { data } = useContext(AppContext)\n\n  const selectedData = data.filter(el => el.selected)\n  if (!selectedData.length) return (\n    <div className=\"container birthdaysContainer\">\n      <h2>No selected employees</h2>\n    </div>\n  )\n\n  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ]\n\n  const renderMonths = monthNames.map(month => {\n    const monthList = selectedData.filter(el => moment(el.dob).format('MMMM') === month)\n    if (!monthList.length) return null\n    return (\n      <div key={month}>\n        <h3>{month}</h3>\n        <ul>\n          {monthList.map(employee => <EmployeesBirthdayItem key={employee.id} employee={employee}/>)}\n        </ul>\n      </div>\n    )\n  })\n  return (\n    <div className=\"container birthdaysContainer\">\n      <h2>Employees Birthdays</h2>\n      {renderMonths}\n    </div>\n  )\n}\n\nexport default EmployeesBirthdays\n","import React from 'react'\nimport './App.css'\nimport AppContextProvider from './context'\nimport EmployeesList from './components/EmployeesList'\nimport EmployeesBirthdays from './components/EmployeesBithdays'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <AppContextProvider>\n        <EmployeesList/>\n        <EmployeesBirthdays/>\n      </AppContextProvider>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}